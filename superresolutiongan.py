# -*- coding: utf-8 -*-
"""SuperResolutionGAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LZGpmiFNxPrIPhayoAvBNvmsuQWmQS5G

## ESRGAN - Enhanced Super Resolution GAN
"""

!pip uninstall torch -y
!python -m pip install torch==2.0.1 torchvision==0.15.2 --extra-index-url https://download.pytorch.org/whl/cu118

import os
import glob
import cv2
import numpy as np
import torch
from google.colab.patches import cv2_imshow

!git clone https://github.com/xinntao/ESRGAN

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/ESRGAN

import RRDBNet_arch as arch

"""#### Modelo pré treinado
##### Modelos disponiveis:
- RRDB_ESRGAN_x4.pth
- RRDB_PSNR_x4.pth
"""

nome_modelo = "RRDB_ESRGAN_x4.pth"
device = torch.device('cuda')

dir_modelos = 'models/'
print(dir_modelos, nome_modelo)

import gdown
modelo_1 = '{}RRDB_ESRGAN_x4.pth'.format(dir_modelos)
modelo_2 = '{}RRDB_PSNR_x4.pth'.format(dir_modelos)
modelo_1, modelo_2

gdown.download('https://drive.google.com/uc?id=1TPrz5QKd8DHHt1k8SRtm6tMiPjz_Qene', modelo_1)
gdown.download('https://drive.google.com/uc?id=1pJ_T-V1dpb1ewoEra1TGSWl5e6H7M4NN', modelo_2)

def carregar_model(nome_modelo, dir_modelos, device):
  modelo_caminho = "{}{}".format(dir_modelos, nome_modelo)
  modelo = arch.RRDBNet(3, 3, 64, 23, gc = 32) #3=canais de entrada(rgb)\3=canais de saida\64=kernel_size\
  modelo.load_state_dict(torch.load(modelo_caminho), strict = True)
  modelo.eval()
  modelo = modelo.to(device)
  return modelo

modelo = carregar_model(nome_modelo, dir_modelos, device)

dir_imagens = '/content/ESRGAN/LR/'

img_nome = "{}montanha.jpg".format(dir_imagens)
img_nome

img = cv2.imread(img_nome)

cv2_imshow(img)

"""## Super Resolution"""

def super_resolution(imagem_path, device, modelo):
  base = os.path.splitext(os.path.basename(imagem_path))[0] #base do diretorio
  img = cv2.imread(imagem_path) #ler imagem
  img = img * 1.0 / 255 #normalização
  img = torch.from_numpy(np.transpose(img[:, :, [2,1,0]], (2,0,1))).float() #convertendo para tensor
  LR = img.unsqueeze(0) #LR = Low Resolution\ Alterando dimensão do tensor (batch)
  LR = LR.to(device)

  with torch.no_grad(): #desabilitando calculo do gradiente, esse calculo só é utilizado no treinamento
    resultado = modelo(LR).data.squeeze().float().cpu().clamp_(0,1).numpy()
  resultado = np.transpose(resultado[[2,1,0], :, :], (1,2,0)) #voltando ao formato convencional da imagem
  resultado = (resultado * 255.0).round() #desnormalizando dados
  cv2.imwrite('results/{:s}_sr.png'. format(base), resultado)
  return resultado

resultado_sr = super_resolution(img_nome, device, modelo)
print(resultado_sr.shape)
cv2_imshow(resultado_sr)

"""### Avaliação do resultado"""

img = cv2.imread(img_nome)
resultado_bicubic = cv2.resize(img, (0,0), fx = 4.0, fy = 4.0, interpolation = cv2.INTER_CUBIC)
cv2_imshow(resultado_bicubic)

"""#### Artefatos = Pontos novos criados pela GAN

### Novo modelo: PSNR
Peak Single to Noise Ratio (PSNR) é uma das métricas mais usadas para medir a qualidade da reconstrução de imagens comprimidas por compressões sujeitas a perdas.
"""

nome_modelo = 'RRDB_PSNR_x4.pth'
modelo = carregar_model(nome_modelo, dir_modelos, device)
resultado_sr = super_resolution(img_nome, device, modelo)
print(resultado_sr.shape)
cv2_imshow(resultado_sr)

resultado_menor = cv2.resize(resultado_sr, (0,0), fx = 0.5, fy = 0.5)
print(resultado_menor.shape)
cv2_imshow(resultado_menor)

"""- Imagem gerada pelo modelo Peak Single to Noise Ratio é menor, mas é muito mais nitida e com menos artefatos

### Teste em várias imagens
"""

diretorio = '/content/ESRGAN/LR/*'

for imagem in glob.glob(diretorio):
  resultado_sr = super_resolution(imagem, device, modelo)
  cv2_imshow(resultado_sr)

"""## Melhorando Resultados
#### Os mesmos autores do ESRGAN publicaram uma versão ainda melhor de seu modelo.
"""

!git clone https://github.com/xinntao/Real-ESRGAN.git

# Commented out IPython magic to ensure Python compatibility.
# %cd Real-ESRGAN

!pip install basicsr
!pip install facexlib
!pip install gfpgan
!pip install -r requirements.txt
!python setup.py develop

"""## Super resolução

> Parâmetro 1: modelo

Esse algoritmo aceita como parâmetro os seguintes modelos:

* RealESRGAN_x4plus (padrão)
* RealESRNet_x4plus
* RealESRGAN_x4plus_anime_6B
* RealESRGAN_x2plus
* realesr-animevideov3
* realesr-general-x4v3

> Parâmetro 2: pasta onde as imagens de teste estão

> Parâmetro 3: escala da super resolução (em quanto será aumentada)
"""

!python inference_realesrgan.py -n RealESRGAN_x4plus -i ../LR --outscale 4

img_resultado = cv2.imread('results/montanha_out.jpg')
cv2_imshow(img_resultado)

img_original = cv2.imread('../LR/islandia.jpg')
img_resultado = cv2.imread('results/islandia_out.jpg')
cv2_imshow(img_original)
cv2_imshow(img_resultado)

img_original = cv2.imread("../LR/lego.jpg")
img_resultado = cv2.imread("results/lego_out.jpg")
cv2_imshow(img_original)
cv2_imshow(img_resultado)

img_original = cv2.imread("../LR/simpsons02.jpg")
img_resultado = cv2.imread("results/simpsons02_out.jpg")
cv2_imshow(img_original)
cv2_imshow(img_resultado)

"""#### Resultados ficam visivelmente melhor com praticamente nenhum artefato gerado"""